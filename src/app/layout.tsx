import type {Metadata} from 'next';
import { GeistSans } from 'geist/font/sans';
import { GeistMono } from 'geist/font/mono';
import './globals.css';
import { Toaster } from "@/components/ui/toaster";
import { AppProvider } from '@/context/AppContext';

export const metadata: Metadata = {
  metadataBase: new URL('https://www.genscout.ai'),
  title: {
    default: 'GenScoutAI: AI-Powered Location Scouting for Film & Photo',
    template: '%s | GenScoutAI',
  },
  description:
    'Instantly find and visualize cinematic locations with GenScoutAI. Use AI to generate realistic shots, adjust lighting, weather, and camera parameters for your next film or photoshoot. Streamline your pre-production workflow.',
  keywords: [
    'AI location scouting',
    'generative AI for film',
    'cinematic shot generation',
    'film pre-production tools',
    'photoshoot location finder',
    'AI scene visualization',
    'virtual location scouting',
    'GenScoutAI',
  ],
  authors: [{ name: 'GenScoutAI Team', url: 'https://www.genscout.ai' }],
  creator: 'GenScoutAI Team',
  robots: {
    index: true,
    follow: true,
    googleBot: {
      index: true,
      follow: true,
      'max-video-preview': -1,
      'max-image-preview': 'large',
      'max-snippet': -1,
    },
  },
  openGraph: {
    title: 'GenScoutAI: AI-Powered Location Scouting',
    description: 'Find and visualize cinematic locations instantly with AI. Adjust lighting, weather, and camera parameters to generate realistic shots.',
    url: 'https://www.genscout.ai',
    siteName: 'GenScoutAI',
    images: [
      {
        url: '/og-image.png',
        width: 1200,
        height: 630,
        alt: 'A cinematic shot being generated by the GenScoutAI interface.',
      },
    ],
    locale: 'en_US',
    type: 'website',
  },
  twitter: {
    card: 'summary_large_image',
    title: 'GenScoutAI: AI-Powered Location Scouting for Film & Photo',
    description: 'Use AI to find and visualize cinematic locations. Generate realistic shots, adjust lighting, weather, and camera parameters.',
    images: ['/twitter-image.png'],
  },
  icons: {
    icon: '/favicon.ico',
    shortcut: '/favicon-16x16.png',
    apple: '/apple-touch-icon.png',
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={`${GeistSans.variable} ${GeistMono.variable} font-sans antialiased`}>
        <AppProvider>
          {children}
        </AppProvider>
        <Toaster />
      </body>
    </html>
  );
}
